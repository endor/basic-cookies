use crate::from_user_agent::{CookieLexerError, CookieToken};
use crate::from_user_agent::cookie::terminals::Cookie;
use crate::from_user_agent::cookie::nonterminals::NonTerminalSpan;

grammar;

pub(crate) Cookies: Vec<Cookie> = {
    <CookieString> => <>,
    OWS <CookieString> => <>,
    <CookieString> OWS => <>,
    OWS <CookieString> OWS => <>
}

CookieString: Vec<Cookie> = {
    <c: Cookie> => vec![c],
    <cv: CookieString> ";" " " <c: Cookie> => { let mut owned_cv = cv; owned_cv.push(c); owned_cv }
}

Cookie: Cookie = {
    <t: Token> "=" <c: PossiblyQuotedCookieOctets> => Cookie {
        key: t,
        value: c
    },
    <l: @L> "=" <c: PossiblyQuotedCookieOctets> => Cookie {
        key: NonTerminalSpan::new(l, l),
        value: c
    },
    <t: Token> "=" <r: @R> => Cookie {
        key: t,
        value: NonTerminalSpan::new(r, r)
    },
    <l: @L> "=" <r: @R> => Cookie {
        key: NonTerminalSpan::new(l, l),
        value: NonTerminalSpan::new(r, r)
    },
    <l: @L> <c: PossiblyQuotedNoEqualsCookieOctets> => Cookie {
        key: NonTerminalSpan::new(l, l),
        value: c
    },
};

PossiblyQuotedCookieOctets: NonTerminalSpan = {
    <CookieOctets> => <>,
    "\"" <c: CookieOctets> "\"" => <>
}

PossiblyQuotedNoEqualsCookieOctets: NonTerminalSpan = {
    <NoEqualsCookieOctets> => <>,
    "\"" <c: NoEqualsCookieOctets> "\"" => <>
}

Token: NonTerminalSpan = {
    <l: @L> "token_or_cookie_octets" <r: @R> => NonTerminalSpan::new(l, r)
}

NoEqualsCookieOctets: NonTerminalSpan = {
    <l: @L> "cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> "token_or_cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> NoEqualsCookieOctets "cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> NoEqualsCookieOctets "token_or_cookie_octets" <r: @R> => NonTerminalSpan::new(l, r)
}

CookieOctets: NonTerminalSpan = {
    <l: @L> "cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> "token_or_cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> "=" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> CookieOctets "cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> CookieOctets "token_or_cookie_octets" <r: @R> => NonTerminalSpan::new(l, r),
    <l: @L> CookieOctets "=" <r: @R> => NonTerminalSpan::new(l, r)
}

OWS: () = {
    OWSPart => (),
    OWSPart OWS => ()
}

OWSPart: () = {
    " " => (),
    "ws" => (),
}

extern {
    type Location = usize;
    type Error = CookieLexerError;

    enum CookieToken {
        "cookie_octets" => CookieToken::CookieOctets,
        "token_or_cookie_octets" => CookieToken::TokenOrCookieOctets,
        "=" => CookieToken::Equals,
        ";" => CookieToken::Semicolon,
        " " => CookieToken::Space,
        "ws" => CookieToken::Whitespace,
        "\"" => CookieToken::DoubleQuote
    }
}